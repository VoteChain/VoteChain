{
  "components": {
    "components/widget/Result": {
      "code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && props.vote;\n// const voteId = 113239184;\n\n// All the votes\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst otherCandidates = Social.index(\"voteChainTest\", \"candidate\")\n  ? Social.index(\"voteChainTest\", \"candidate\")\n  : [];\nconst otherParties = Social.index(\"voteChainTest\", \"party\")\n  ? Social.index(\"voteChainTest\", \"party\")\n  : [];\nconst votes = Social.index(\"voteChainTest\", \"votes\")\n  ? Social.index(\"voteChainTest\", \"votes\")\n  : [];\n\n// Set the value of votetorender by adding other parties and candidates to it\nfunction getValue() {\n  var temp = allVotes.find(\n    (vote) => parseFloat(vote.blockHeight) === parseFloat(voteId)\n  );\n\n  var votesOnThis = votes.filter(\n    (vote) =>\n      parseFloat(vote.value.voteId) === parseFloat(voteId) &&\n      vote.value.by &&\n      vote.value.party\n  );\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value?.parties?.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n      candidates: temp.value?.candidates\n        ?.concat(\n          // Add other candidates to the list of all candidates\n          otherCandidates\n            .filter(\n              (candidate) =>\n                // Get only the candidates of the vote and vreified\n                candidate.value.voteId === voteId &&\n                candidate.value.name &&\n                candidate.value.party &&\n                candidate.value.role\n            )\n            .map((c) => c.value)\n        )\n        .map(\n          // This put the number of votes of the candidate\n          (cand, i) => ({\n            ...cand,\n            votes: votesOnThis.filter((vote) => vote.value.party === cand.party)\n              .length,\n          })\n        ),\n      voters: votesOnThis.map((vote) => vote.value.by),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([\n  {\n    name: \"Voting Page\",\n    link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n  },\n  {\n    name: \"Result\",\n    link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n  },\n]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\n// other variables\nconst [opened, setOpened] = useState(false);\nconst [state, setState] = useState({\n  show_error_on_passwordInput: false,\n});\nconst [passcodeEntered, setPasscodeEntered] = useState(\"\");\n\n// Hashing function\nfunction hash(text) {\n  var hashed = \"\";\n  for (var i = 0; i < text.length; i++) {\n    // console.log(text.charAt(i), \"=\", text.charCodeAt(i));\n    hashed += text.charCodeAt(i);\n  }\n  //   console.log(hashed);\n  return hashed;\n}\n\n// Check the entered passcode if it is correct\nfunction checkPasscode() {\n  const hashedPasscode = hash(passcodeEntered);\n  if (hashedPasscode === voteToRender.value.passcode) {\n    console.log(\"true\");\n    setOpened(true);\n    return true;\n  } else {\n    console.log(\"false\");\n    setState({\n      ...state,\n      show_error_on_passwordInput: true,\n    });\n    return false;\n  }\n}\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{\n                      objs: pages,\n                      active: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n                    }}\n                  />\n\n                  {voteToRender.value.passcode === \"\" || opened ? (\n                    <div className=\"body-contents\">\n                      <h1>Result</h1>\n                      {/* Calling the table component */}\n                      {/* Extracting The values in the table an converting them to list */}\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\n                            \"Candidate's Name\",\n                            \"Party\",\n                            \"Role\",\n                            \"Number of votes\",\n                          ],\n                          data: Object.values(\n                            voteToRender.value.candidates\n                              .sort((a, b) => a.votes - b.votes)\n                              .map((c) => Object.values(c))\n                          ),\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <div className=\"form\">\n                        <div style={{ textAlign: \"center\" }}>\n                          Please Enter Passcode\n                        </div>\n                        <p\n                          className=\"error\"\n                          style={{\n                            color: \"red\",\n                            display: state.show_error_on_passwordInput\n                              ? \"block\"\n                              : \"none\",\n                            textAlign: \"center\",\n                          }}\n                        >\n                          The Password you entered is incorrect\n                        </p>\n                        <Widget\n                          src=\"abnakore.near/widget/Input.jsx\"\n                          props={{\n                            type: \"password\",\n                            placeholder: \"Enter Passcode\",\n                            required: true,\n                            otherAttributes: {\n                              value: passcodeEntered,\n                              autoFocus: true,\n                              onKeyPress: (e) => {\n                                if (e.key === \"Enter\") {\n                                  checkPasscode();\n                                }\n                              },\n                              onChange: (e) => {\n                                setPasscodeEntered(e.target.value);\n                              },\n                            },\n                          }}\n                        />\n                        <button onClick={checkPasscode}>Submit</button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" />\n    )}\n  </>\n);\n"
    },
    "components/widget/VoteCard": {
      "code": "const accountId = context.accountId;\n// const props = {\n//   name: \"Vote tenent\",\n//   desc: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n//   role: \"part\",\n//   creator: \"abnakore.near\",\n//   openTime: \"2024-02-20T15:45\",\n//   closeTime: \"2024-03-20T15:45\",\n//   createdOn: \"2024-03-20T15:45\",\n//   limit: 3,\n//   opened: true,\n//   passcode: \"null\",\n//   candidates: [1, 2, 3, 4, 5, 6, 6, 6],\n//   parties: [1, 2, 3, 4, 5, 6],\n//   voters: [],\n//   style: {},\n// };\n\n//  Format the date and time (January 7, 2024 at 5:57 PM)\nfunction formatDateTime(dateTimeString) {\n  // Assuming you have a date-time input with the format \"YYYY-MM-DDTHH:mm\" as a string\n  const dateTime = new Date(dateTimeString);\n\n  // Formatting the date and time in 12-hour format\n  const formattedDateTime = dateTime.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true, // Set to true for 12-hour format\n  });\n\n  return formattedDateTime;\n}\n\n// Get the current date and time\nfunction getDateTime() {\n  var now = new Date();\n  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n  return now.toISOString().slice(0, 16);\n}\n\n// check if the vote is ongoing\nfunction isOngoing() {\n  return props.closeTime !== \"\"\n    ? Date.parse(props.openTime) <= Date.parse(getDateTime()) &&\n        Date.parse(props.closeTime) > Date.parse(getDateTime())\n    : Date.parse(props.openTime) <= Date.parse(getDateTime());\n}\n\nfunction shortText(text) {\n  const words = text.split(\"\");\n  return words.slice(0, 70).join(\"\") + \"...\";\n}\n\nuseEffect(() => console.log(props), []);\n\n// Styles\nconst Card = styled.div`\n  .card-div {\n    width: 100%;\n    background-color: ${isOngoing() ? \"#333\" : \"#444\"};\n    color: white;\n    padding: 20px;\n    margin: 5px;\n    border-radius: 10px;\n    box-shadow: 0 0 0px rgba(0, 0, 0, 0.5);\n    position: relative;\n    align-items: left;\n    min-height: auto;\n    transition: 0.5s ease;\n  }\n\n  .card-div:hover {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n    background-color: #555;\n    transform: scale(1.01);\n  }\n\n  .big-name {\n    font-size: 36px;\n    margin-bottom: 10px;\n  }\n\n  .time {\n    font-size: 14px;\n  }\n\n  .description {\n    font-size: 16px;\n    margin-top: 10px;\n  }\n\n  .details {\n    display: flex;\n    justify-content: space-between;\n    gap: 15px;\n    margin-top: 10px;\n  }\n\n  .lock-icon {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n  .tick-icon {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n  }\n`;\n\nreturn (\n  <Card>\n    <div className=\"card-div\" style={{ ...props.style }}>\n      {props.voters.includes(accountId) && (\n        <svg\n          fill=\"#009a70\"\n          width=\"20px\"\n          height=\"20px\"\n          viewBox=\"-3.2 -3.2 38.40 38.40\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          stroke=\"#009a70\"\n          stroke-width=\"0.5\"\n          className=\"tick-icon\"\n          transform=\"matrix(1, 0, 0, 1, 0, 0)rotate(0)\"\n        >\n          <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n          <g\n            id=\"SVGRepo_tracerCarrier\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke=\"#000000\"\n            stroke-width=\"1.7920000000000003\"\n          >\n            <path d=\"M0 26.016v-20q0-2.496 1.76-4.256t4.256-1.76h20q2.464 0 4.224 1.76t1.76 4.256v20q0 2.496-1.76 4.224t-4.224 1.76h-20q-2.496 0-4.256-1.76t-1.76-4.224zM4 26.016q0 0.832 0.576 1.408t1.44 0.576h20q0.8 0 1.408-0.576t0.576-1.408v-20q0-0.832-0.576-1.408t-1.408-0.608h-20q-0.832 0-1.44 0.608t-0.576 1.408v20zM7.584 16q0-0.832 0.608-1.408t1.408-0.576 1.408 0.576l2.848 2.816 7.072-7.040q0.576-0.608 1.408-0.608t1.408 0.608 0.608 1.408-0.608 1.408l-8.48 8.48q-0.576 0.608-1.408 0.608t-1.408-0.608l-4.256-4.256q-0.608-0.576-0.608-1.408z\"></path>{\" \"}\n          </g>\n          <g id=\"SVGRepo_iconCarrier\">\n            <path d=\"M0 26.016v-20q0-2.496 1.76-4.256t4.256-1.76h20q2.464 0 4.224 1.76t1.76 4.256v20q0 2.496-1.76 4.224t-4.224 1.76h-20q-2.496 0-4.256-1.76t-1.76-4.224zM4 26.016q0 0.832 0.576 1.408t1.44 0.576h20q0.8 0 1.408-0.576t0.576-1.408v-20q0-0.832-0.576-1.408t-1.408-0.608h-20q-0.832 0-1.44 0.608t-0.576 1.408v20zM7.584 16q0-0.832 0.608-1.408t1.408-0.576 1.408 0.576l2.848 2.816 7.072-7.040q0.576-0.608 1.408-0.608t1.408 0.608 0.608 1.408-0.608 1.408l-8.48 8.48q-0.576 0.608-1.408 0.608t-1.408-0.608l-4.256-4.256q-0.608-0.576-0.608-1.408z\"></path>{\" \"}\n          </g>\n        </svg>\n      )}\n      <div className=\"big-name\">{props.name}</div>\n      <div className=\"description\">{shortText(props.desc)}</div>\n      <div className=\"details\">\n        <div className=\"time\">Open on: {formatDateTime(props.openTime)}</div>\n        {props.closeTime !== \"\" && (\n          <div className=\"time\">\n            Close on: {formatDateTime(props.closeTime)}\n          </div>\n        )}\n        <div className=\"time\">\n          Created By:{\" \"}\n          <a\n            href={`https://near.org/near/widget/ProfilePage?accountId=${accountId}`}\n            target=\"_blank\"\n          >\n            {props.creator}\n          </a>\n        </div>\n        <div className=\"time\">No of Candidates: {props.candidates.length}</div>\n      </div>\n      {props.passcode !== \"\" ? <div className=\"lock-icon\">🔐</div> : \"\"}\n    </div>\n  </Card>\n);\n"
    },
    "components/widget/Register": {
      "code": "return (\n  <Widget\n    src=\"abnakore.near/widget/Wrapper.jsx\"\n    props={{\n      body: (\n        <div>\n          <h1>Register</h1>\n          <div>\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"form\">\n            <div className=\"flex\">\n              <Widget\n                src=\"abnakore.near/widget/Input.jsx\"\n                props={{\n                  type: \"text\",\n                  placeholder: \"First Name\",\n                  required: true,\n                }}\n              />\n              <p>ee{Social.parties}</p>\n              <Widget\n                src=\"abnakore.near/widget/Input.jsx\"\n                props={{\n                  type: \"text\",\n                  placeholder: \"Last Name\",\n                  required: true,\n                }}\n              />\n            </div>\n            <Widget\n              src=\"abnakore.near/widget/Input.jsx\"\n              props={{ type: \"email\", placeholder: \"Email\", required: true }}\n            />\n            <Widget\n              src=\"abnakore.near/widget/Input.jsx\"\n              props={{\n                type: \"password\",\n                placeholder: \"Password\",\n                required: true,\n              }}\n            />\n\n            <Widget\n              src=\"abnakore.near/widget/Input.jsx\"\n              props={{\n                type: \"password\",\n                placeholder: \"Confirm Password\",\n                required: true,\n              }}\n            />\n            <button className=\"submit\">Submit</button>\n            <p className=\"signin\">\n              Already have an acount ? <Link to=\"/signin\">Sign in</Link>{\" \"}\n            </p>\n          </div>\n        </div>\n      ),\n    }}\n  />\n);\n"
    },
    "components/widget/Hero": {
      "code": "const Styled = styled.div`\n  @keyframes glow {\n    from {\n      text-shadow: none;\n    }\n    to {\n      text-shadow: 0 0 10px rgba(255, 255, 255, 0.2);\n    }\n  }\n  .headings .headline,\n  .headings .subheadline {\n    margin: 10px 0;\n  }\n  .headings .headline {\n    font-size: 4.5rem;\n    font-weight: bold;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n  .headings .subheadline {\n    font-size: 1.5rem;\n    font-weight: 400;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n  }\n  .headings .headline:hover,\n  .headings .subheadline:hover {\n    animation: glow 0.5s ease-in-out forwards;\n  }\n  .headings img {\n    width: 200px;\n    border-radius: 20px;\n  }\n\n  /* hero */\n  .hero {\n    position: relative;\n    /* For background animation */\n    height: 100vh;\n    width: 100vw;\n    /* Full viewport height */\n    text-align: center;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    /* Contain animation */\n  }\n\n  .hero-background {\n    /* Add your background image/video here */\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n    background-position: center;\n  }\n  .hero-background .bg-video {\n    z-index: -1;\n    height: 100%;\n    background: url(https://ipfs.near.social/ipfs/bafybeihp7g44qet2eaiklsccug3gerjt3dxbqw5wblij7s3zh7zpdnez7a)\n      center/cover no-repeat;\n  }\n  .hero-background .overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 3, 5, 0.55);\n  }\n  @keyframes background-move {\n    from {\n      transform: translateX(0);\n    }\n    to {\n      transform: translateX(-100%);\n    }\n  }\n\n  .hero-content {\n    color: #fff;\n    opacity: 0;\n    animation: fade-in 1s ease-in forwards;\n  }\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  .hero-buttons {\n    margin-top: 30px;\n  }\n\n  .hero-buttons a {\n    background-color: #007bff;\n    color: #fff;\n    padding: 10px 20px;\n    border: none;\n    text-decoration: none;\n    font-weight: bold;\n    display: inline-block;\n    margin: 10px;\n    transition: all 0.3s ease-in-out;\n  }\n\n  .hero-buttons a:hover {\n    background-color: #0062cc;\n    transform: scale(1.1);\n  }\n\n  .hero-buttons a:after {\n    content: \"\";\n    display: block;\n    width: 0;\n    height: 2px;\n    background-color: #fff;\n    transition: width 0.3s ease-in-out;\n  }\n\n  .hero-buttons a:hover:after {\n    width: 100%;\n  }\n`;\n\nreturn (\n  <Styled>\n    <div class=\"hero\">\n      <div class=\"hero-background\">\n        <div class=\"overlay\"></div>\n        <div class=\"bg-video\"></div>\n      </div>\n      <div class=\"hero-content\">\n        <div class=\"headings\">\n          <img\n            src=\"https://ipfs.near.social/ipfs/bafkreib3x3txsa57lsllu5v5esvajlpkhslgzkzqp4gxnsyqbuhgwgrixy\"\n            alt=\"logo\"\n          />\n          <h1 class=\"headline\">VoteChain</h1>\n        </div>\n        <div class=\"\">\n          <h2>Vote with confidence. Vote with power. Vote decentralized.</h2>\n          <div class=\"hero-buttons\">\n            <a href=\"#\">Create a Vote</a>\n            <a href=\"#\">Learn More</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Styled>\n);\n\n\n\n"
    },
    "components/widget/App": {
      "code": "// Get the user's accountId\nconst accountId = context.accountId;\n// https://lh3.googleusercontent.com/bard/APmgjFuZWsaz_o97xrT2glKR2ZkehWocnVMZLDGaMQYqaiBpc4_jJibMhhrERiLR5G9cfexuxPUngtq3XeWlWme_tbHMdep04y7fNOJlPNJy7K2BM2NRQy78oFzQCSzgBDZf7dUuiuN2_dbRV6aiVJOe3_4tXyBNvj7NErzEFPRgwGNsyKdTgq3T-1rJCvv76lN75HuL09zHeDdw_SQXHjVHWT2FzY563BaiDVpiIQMiP0q8JNGHjC9TlFhb2EX0LlLQTZJhjYxE4vuVcQWcf2B1AydA72UvTB3pQGMM-sNdzNyJUQddmd0RanSejz9BeosxU-b3fZxAcikT2UJzZ_Q\n\n// Declaring variables\nconst voteId = props.vote && props.vote;\n// const voteId = \"118863372\";\n\n// All the votes\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst otherCandidates = Social.index(\"voteChainTest\", \"candidate\")\n  ? Social.index(\"voteChainTest\", \"candidate\")\n  : [];\nconst otherParties = Social.index(\"voteChainTest\", \"party\")\n  ? Social.index(\"voteChainTest\", \"party\")\n  : [];\nconst votes = Social.index(\"voteChainTest\", \"votes\")\n  ? Social.index(\"voteChainTest\", \"votes\")\n  : [];\n\n// Get the watchlist\nconst watchlistData = Social.get(`${accountId}/voteChain_watchlist`);\nconst [watchlist, setWatchlist] = useState([]);\nuseEffect(() => {\n  if (watchlistData === undefined) {\n    setWatchlist([]);\n  } else {\n    setWatchlist(JSON.parse(watchlistData));\n  }\n}, [watchlistData]);\n\n// Set the value of votetorender by adding other parties and candidates to it\nfunction getValue() {\n  console.log(otherCandidates, \"this\");\n  console.log(\n    allVotes,\n    voteId,\n    allVotes.find(\n      (vote) => parseFloat(vote.blockHeight) === parseFloat(voteId)\n    ),\n    \"vote___\"\n  );\n  var temp = allVotes.find(\n    (vote) => parseFloat(vote.blockHeight) === parseFloat(voteId)\n  )\n    ? allVotes.find(\n        (vote) => parseFloat(vote.blockHeight) === parseFloat(voteId)\n      )\n    : {};\n  var votesOnThis = votes.filter(\n    (vote) =>\n      parseFloat(vote.value.voteId) === parseFloat(voteId) &&\n      vote.value.by &&\n      vote.value.party\n  );\n  console.log(\n    temp,\n    allVotes.find((vote) => vote.blockHeight === voteId),\n    \"temp___\"\n  );\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value?.parties?.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n      candidates: temp.value?.candidates\n        ?.concat(\n          // Add other candidates to the list of all candidates\n          otherCandidates\n            .filter(\n              (candidate) =>\n                // Get only the candidates of the vote and vreified\n                candidate.value.voteId === voteId &&\n                candidate.value.name &&\n                candidate.value.party &&\n                candidate.value.role\n            )\n            .map((c) => c.value)\n        )\n        .map(\n          // This put the number of votes of the candidate\n          (cand, i) => ({\n            ...cand,\n            votes: votesOnThis.filter((vote) => vote.value.party === cand.party)\n              .length,\n          })\n        ),\n      voters: votesOnThis.map((vote) => vote.value.by),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  console.log(\n    \"Is Admin?\",\n    voteToRender.value.creator,\n    voteToRender.blockHeight,\n    accountId,\n    voteToRender.value.creator === accountId,\n    props\n  );\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender]);\n\n// other variables\nconst [opened, setOpened] = useState(false);\nconst [state, setState] = useState({\n  show_message: false,\n  show_error_on_dropdown: false,\n  show_error_on_passwordInput: false,\n});\nconst [passcodeEntered, setPasscodeEntered] = useState(\"\");\nconst [candidate, setCandidate] = useState(\"\");\nconst [party, setparty] = useState(0);\n\n// Hashing function\nfunction hash(text) {\n  var hashed = \"\";\n  for (var i = 0; i < text.length; i++) {\n    // console.log(text.charAt(i), \"=\", text.charCodeAt(i));\n    hashed += text.charCodeAt(i);\n  }\n  //   console.log(hashed);\n  return hashed;\n}\n\n// Check the entered passcode if it is correct\nfunction checkPasscode() {\n  const hashedPasscode = hash(passcodeEntered);\n  if (hashedPasscode === voteToRender.value.passcode) {\n    console.log(\"true\");\n    setOpened(true);\n    return true;\n  } else {\n    console.log(\"false\");\n    setState({\n      ...state,\n      show_error_on_passwordInput: true,\n    });\n    return false;\n  }\n}\n\n// Function for voting\nfunction vote() {\n  console.log(candidate, party, \"CP\");\n  if (candidate !== \"\" && party !== \"\") {\n    setState({\n      ...state,\n      show_message: true,\n    });\n\n    // Update\n    // !!!\n    // Social.set({\n    //   index: {\n    //     voteChainTest: JSON.stringify({\n    //       key: \"votes\",\n    //       value: {\n    //         by: accountId,\n    //         voteId: voteId,\n    //         party: party,\n    //       },\n    //     }),\n    //   },\n    // });\n    return {\n      index: {\n        voteChainTest: JSON.stringify({\n          key: \"votes\",\n          value: {\n            by: accountId,\n            voteId: voteId,\n            party: party,\n          },\n        }),\n      },\n    };\n  } else {\n    // Set an error on the dropdown\n    setState({\n      ...state,\n      show_error_on_dropdown: true,\n    });\n    return;\n  }\n}\n\n// Update the value of the dropdowns when changed\nfunction updateDropdown(e) {\n  setCandidate(e.target.value);\n  setparty(e.target.value);\n  console.log(\n    e.target.value,\n    voteToRender.value.candidates[e.target.value],\n    candidate\n  );\n  // Remove the  error on the dropdown\n  setState({\n    ...state,\n    show_error_on_dropdown: false,\n  });\n}\n\n// Get the current date and time\nfunction getDateTime() {\n  var now = new Date();\n  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n  return now.toISOString().slice(0, 16);\n}\n\n//  Format the date and time (January 7, 2024 at 5:57 PM)\nfunction formatDateTime(dateTimeString) {\n  // Assuming you have a date-time input with the format \"YYYY-MM-DDTHH:mm\" as a string\n  const dateTime = new Date(dateTimeString);\n\n  // Formatting the date and time in 12-hour format\n  const formattedDateTime = dateTime.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true, // Set to true for 12-hour format\n  });\n\n  return formattedDateTime;\n}\n\n// check if the vote is ongoing\nfunction isOngoing() {\n  return voteToRender.value.closeTime !== \"\"\n    ? Date.parse(voteToRender.value.openTime) <= Date.parse(getDateTime()) &&\n        Date.parse(voteToRender.value.closeTime) > Date.parse(getDateTime())\n    : Date.parse(voteToRender.value.openTime) <= Date.parse(getDateTime());\n}\nconst [ongoing, setOngoing] = useState(isOngoing());\n// Re check if it is ongoing every 1 sec\nuseEffect(() => {\n  const interval = setInterval(() => {\n    setOngoing(isOngoing());\n  }, 1000);\n  return () => clearInterval(interval);\n}, [voteToRender]);\n\n// Add the vote to watchlist\nfunction addToWatchlist() {\n  if (watchlist.includes(voteId)) {\n    // remove from watchlist\n    Social.set({\n      voteChain_watchlist: watchlist.filter((item) => item !== voteId),\n    });\n  } else {\n    // Add to watchlist\n    Social.set({ voteChain_watchlist: watchlist.concat(voteId) });\n  }\n}\n\nconst secText = styled.h3`\n  text-align: center;\n`;\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {/* Check if the vote exists(i.e allVotes[voteId] exists) */}\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  {/* The Aside bar that helps in quick navigation btw pages */}\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{\n                      objs: pages,\n                      active: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n                    }}\n                  />\n\n                  {/* Check if the vote is ongoing */}\n                  {ongoing === true ? (\n                    // Check if the vote has password\n                    voteToRender.value.passcode === \"\" || opened ? (\n                      // Check if the vote reached to its voters limit\n                      voteToRender.value.limit === \"\" ||\n                      (voteToRender.value.limit !== \"\" &&\n                        voteToRender.value.limit >\n                          voteToRender.value.voters.length) ? (\n                        <div className=\"body-contents\">\n                          <button onClick={addToWatchlist}>\n                            {watchlist.includes(voteId)\n                              ? \"Remove from watchlist\"\n                              : \"Add to watchlist\"}\n                          </button>\n                          <i>\n                            <svg\n                              width=\"64px\"\n                              height=\"64px\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                              <g\n                                id=\"SVGRepo_tracerCarrier\"\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                              ></g>\n                              <g id=\"SVGRepo_iconCarrier\">\n                                <path\n                                  d=\"M4 6H20M4 12H20M4 18H20\"\n                                  stroke=\"#fefefe\"\n                                  stroke-width=\"2\"\n                                  stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\"\n                                ></path>\n                              </g>\n                            </svg>\n                          </i>\n                          <h1>{voteToRender.value.name}</h1>\n                          <p\n                            style={{\n                              textAlign: \"justify\",\n                              padding: \"10px 20px\",\n                            }}\n                          >\n                            {voteToRender.value.desc}\n                          </p>\n                          <p\n                            style={{\n                              color: \"green\",\n                              display: voteToRender.value.voters.includes(\n                                accountId\n                              )\n                                ? \"block\"\n                                : \"none\",\n                            }}\n                          >\n                            You Have Succesfully Voted\n                          </p>\n                          <div className=\"card\">\n                            <div className=\"flex\">\n                              <select\n                                disabled={\n                                  voteToRender.value.voters.includes(accountId)\n                                    ? true\n                                    : false\n                                }\n                                className={`drop-down ${\n                                  state.show_error_on_dropdown ? \"error\" : \"\"\n                                }`}\n                                value={candidate}\n                                onChange={updateDropdown}\n                                name=\"candidate\"\n                                required\n                              >\n                                <option className=\"option\" value={\"\"}>\n                                  Select by Candidate\n                                </option>\n                                {voteToRender.value.candidates.map(\n                                  (candidate, i) => (\n                                    <option\n                                      className=\"option\"\n                                      key={candidate.id}\n                                      value={candidate.party}\n                                    >\n                                      {candidate.name}\n                                    </option>\n                                  )\n                                )}\n                              </select>\n                              OR\n                              <select\n                                disabled={\n                                  voteToRender.value.voters.includes(accountId)\n                                    ? true\n                                    : false\n                                }\n                                className={`drop-down ${\n                                  state.show_error_on_dropdown ? \"error\" : \"\"\n                                }`}\n                                value={party}\n                                onChange={updateDropdown}\n                                name=\"party\"\n                                required\n                              >\n                                <option className=\"option\" value={\"\"}>\n                                  Select by Party\n                                </option>\n                                {voteToRender.value.parties\n                                  .filter((party) =>\n                                    voteToRender.value.candidates\n                                      .map((c) => c.party)\n                                      .includes(party.acronym)\n                                  )\n                                  .map((party, i) => (\n                                    <option\n                                      className=\"option\"\n                                      key={party.acronym}\n                                      value={party.acronym}\n                                    >\n                                      {party.name} ({party.acronym})\n                                    </option>\n                                  ))}\n                              </select>\n                            </div>\n                            <CommitButton\n                              disabled={\n                                voteToRender.value.voters.includes(accountId)\n                                  ? true\n                                  : false\n                              }\n                              data={vote}\n                              //   onClick={vote}\n                            >\n                              Vote\n                            </CommitButton>\n\n                            <p\n                              id=\"thanks\"\n                              className={`${state.show_message ? \"\" : \"hide\"}`}\n                            >\n                              Thank you for voting\n                            </p>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"body-contents\">\n                          <secText>\n                            Sorry the max number of voters(\n                            {voteToRender.value.limit}) has been reached\n                          </secText>\n                        </div>\n                      )\n                    ) : (\n                      <div className=\"body-contents\">\n                        <div className=\"form\">\n                          <secText>Please Enter Passcode</secText>\n                          <p\n                            className=\"error\"\n                            style={{\n                              color: \"red\",\n                              display: state.show_error_on_passwordInput\n                                ? \"block\"\n                                : \"none\",\n                              textAlign: \"center\",\n                            }}\n                          >\n                            The Password you entered is incorrect\n                          </p>\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"password\",\n                              placeholder: \"Enter Passcode\",\n                              required: true,\n                              otherAttributes: {\n                                value: passcodeEntered,\n                                autoFocus: true,\n                                onKeyPress: (e) => {\n                                  if (e.key === \"Enter\") {\n                                    checkPasscode();\n                                  }\n                                },\n                                onChange: (e) => {\n                                  setPasscodeEntered(e.target.value);\n                                },\n                              },\n                            }}\n                          />\n                          <button onClick={checkPasscode}>Submit</button>\n                        </div>\n                      </div>\n                    )\n                  ) : (\n                    <div className=\"body-contents\">\n                      {voteToRender.value.closeTime !== \"\"\n                        ? Date.parse(voteToRender.value.openTime) <=\n                            Date.parse(getDateTime()) &&\n                          Date.parse(voteToRender.value.closeTime) >\n                            Date.parse(getDateTime())\n                        : Date.parse(voteToRender.value.openTime) <=\n                          Date.parse(getDateTime())}\n                      {/* If the vote has not been started */}\n                      {Date.parse(voteToRender.value.openTime) >\n                      Date.parse(getDateTime()) ? (\n                        <>\n                          <h1>\n                            This vote will start on: <br />\n                          </h1>\n                          <h3>{formatDateTime(voteToRender.value.openTime)}</h3>\n                        </>\n                      ) : (\n                        <>\n                          <h1>\n                            The vote has been ended on: <br />\n                          </h1>\n                          <h3>\n                            {formatDateTime(voteToRender.value.closeTime)}\n                          </h3>\n                        </>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n"
    },
    "components/widget/ManageParties": {
      "code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && parseFloat(props.vote);\n// const voteId = 113225718; // 113239184\n\n// All the votes\n// const [allVotes, setAllVotes] = useState([]);\n// const [voteToRender, setVoteToRender] = useState([]);\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst [otherParties, setOtherParties] = useState(\n  Social.index(\"voteChainTest\", \"party\")\n    ? Social.index(\"voteChainTest\", \"party\")\n    : []\n);\n\n// Set the value of voteto render by adding other parties to it\nfunction getValue() {\n  var temp = allVotes.find((vote) => vote.blockHeight === voteId);\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value.parties.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\nfunction refresh() {\n  setOtherParties(\n    Social.index(\"voteChainTest\", \"party\")\n      ? Social.index(\"voteChainTest\", \"party\")\n      : []\n  );\n  setVoteToRender(getValue());\n  setNewParty({ name: \"\", acronym: \"\" });\n\n  // Remove the error\n  setState({\n    ...state,\n    error: \"\",\n    showError: false,\n  });\n\n  console.log(\"done\", otherParties);\n}\n\n// Storing some data in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Parties\",\n        link: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\n// name and acro\nconst [newParty, setNewParty] = useState({\n  name: \"\",\n  acronym: \"\",\n});\n\n// Save the data and add a new candidate\nfunction save() {\n  if (newParty.name !== \"\" && newParty.acronym !== \"\") {\n    // Get All the parties again and validate\n    setOtherParties(\n      Social.index(\"voteChainTest\", \"party\")\n        ? Social.index(\"voteChainTest\", \"party\")\n        : []\n    );\n    setVoteToRender(getValue());\n\n    // check for no similar name or acronym\n    if (JSON.stringify(voteToRender.value.parties) !== JSON.stringify([])) {\n      const filtered = voteToRender.value.parties.filter((party) => {\n        return (\n          party.name.toLowerCase() === newParty.name.toLowerCase() ||\n          party.acronym.toLowerCase() === newParty.acronym.toLowerCase()\n        );\n      });\n      if (filtered.length > 0) {\n        setState({\n          ...state,\n          error: \"Two parties can not have thesame Name or Acronym\",\n          showError: true,\n        });\n        return;\n      }\n    }\n\n    // Check for 4 letters of the acronym\n    if (newParty.acronym.length <= 4 && newParty.acronym.length > 0) {\n      const NewParty = {\n        ...newParty,\n        acronym: newParty.acronym.toUpperCase(),\n        name: newParty.name\n          .toLowerCase()\n          .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n        voteId: voteId,\n      };\n\n      console.log(NewParty);\n      // Upload the data to socialDb\n      // Social.set({\n      //   index: {\n      //     voteChainTest: JSON.stringify({ key: \"party\", value: NewParty }),\n      //   },\n      // });\n      // // console.log(newVotes);\n      // setNewParty({ name: \"\", acronym: \"\" });\n      // Remove the error\n      setState({\n        ...state,\n        error: \"\",\n        showError: false,\n      });\n\n      return {\n        index: {\n          voteChainTest: JSON.stringify({ key: \"party\", value: NewParty }),\n        },\n      };\n    } else {\n      setState({\n        ...state,\n        error: \"Acronym must be at most 4 letters\",\n        showError: true,\n      });\n      return null;\n    }\n  } else {\n    setState({\n      ...state,\n      error: `Party ${\n        newParty.name === \"\" ? \"Name\" : \"Acronym\"\n      } can not be empty`,\n      showError: true,\n    });\n  }\n}\n\nconst secText = styled.h3`\n  text-align: center;\n`;\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{\n                      objs: pages,\n                      active: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n                    }}\n                  />\n                  {voteToRender.value.creator === accountId ? (\n                    <div className=\"body-contents\">\n                      <h1>Manage Parties</h1>\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\"S/N\", \"Party Name\", \"Acronym\"],\n                          data: Object.values(\n                            voteToRender.value.parties.map((c, i) =>\n                              [i + 1].concat(Object.values(c))\n                            )\n                          ),\n                        }}\n                      />\n                      <div className=\"form\">\n                        <secText>Add Party</secText>\n                        {state.showError && (\n                          <p style={{ color: \"red\", textAlign: \"center\" }}>\n                            {state.error}\n                          </p>\n                        )}\n                        <div className=\"flex\">\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Party Name\",\n                              required: true,\n                              item: \"name\",\n                              items: newParty,\n                              setItem: setNewParty,\n                              otherAttributes: {\n                                value: newParty.name,\n                              },\n                            }}\n                          />\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Acronym\",\n                              required: true,\n                              item: \"acronym\",\n                              items: newParty,\n                              setItem: setNewParty,\n                              otherAttributes: {\n                                value: newParty.acronym,\n                              },\n                            }}\n                          />\n                        </div>\n                        <CommitButton data={save} onCommit={refresh}>\n                          Add\n                        </CommitButton>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <h1>You don't have access to this page</h1>\n                      <Link to=\"/abnakore.near/widget/VoteChain\">\n                        Back to Home Page\n                      </Link>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                  {JSON.stringify(voteToRender)}\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" />\n    )}\n  </>\n);"
    },
    "components/widget/Table": {
      "code": "const Wrapper = styled.div`\n  table {\n    border-collapse: collapse;\n    max-width: 800px;\n    margin: 20px;\n    color: #fff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n    border-radius: 10px;\n    background-color: #333;\n  }\n  table th,\n  table td {\n    padding: 15px;\n    text-align: left;\n  }\n  table th {\n    background-color: #6c64ff;\n    color: #fff;\n  }\n  table tr:nth-child(even) {\n    background-color: #4c4c4c;\n  }\n  table tr:hover {\n    background-color: #252525;\n  }\n`;\n\nconst [checked, setChecked] = useState([1]);\n\nfunction tuggle(e) {\n  // console.log(checked.includes(e.target.id));\n  setChecked((prev) =>\n    prev.includes(e.target.id)\n      ? prev.filter((i) => i !== e.target.id)\n      : prev.concat(e.target.id)\n  );\n  // setChecked(prev => prev.concat([e.target.id]))\n\n  // setChecked(!checked);\n}\n\nreturn (\n  <Wrapper>\n    <table>\n      <thead>\n        <tr>\n          {props.headings.map((head) => (\n            <th key={head}>{head}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {JSON.stringify(props.data) === JSON.stringify([[]]) ||\n        JSON.stringify(props.data) === JSON.stringify([]) ? (\n          <td colSpan={props.headings.length} style={{ textAlign: \"center\" }}>\n            No Data\n          </td>\n        ) : (\n          props.data.map((cand) => (\n            <tr key={cand[0]}>\n              {cand.map((d) => (\n                <td key={d}>{d}</td>\n              ))}\n            </tr>\n          ))\n        )}\n      </tbody>\n    </table>\n  </Wrapper>\n);\n"
    },
    "components/widget/Button": {
      "code": "const StyledButton = styled.button`\n  background-color: #4caf50;\n  color: #fff;\n  padding: 12px 20px;\n  border: none;\n  text-decoration: none;\n  font-weight: bold;\n  display: inline-block;\n  margin: 10px;\n  transition: all 0.3s ease-in-out;\n  border-radius: 50px;\n  text-wrap: nowrap;\n\n  &:hover {\n    background-color: #5cbf40;\n    &.scale {\n      transform: scale(1.04);\n    }\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    width: 0;\n    height: 2px;\n    background-color: #fff;\n    transition: width 0.3s ease-in-out;\n  }\n\n  &:hover:after {\n    width: 100%;\n  }\n`;\n\nreturn (\n  <StyledButton\n    className={`button ${!props.scaleWhenHover ? null : \"scale\"} ${\n      props.theme\n    }`}\n    onClick={props.handleClick}\n  >\n    {props.title}\n  </StyledButton>\n);\n"
    },
    "components/widget/Wrapper": {
      "code": "const Wrapper = styled.div`\n  .main-body {\n    margin: 0;\n    display: flex;\n    place-items: center;\n    min-width: 320px;\n    min-height: 100vh;\n    width: 100%;\n\n    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n    line-height: 1.5;\n    font-weight: 400;\n    color-scheme: light dark;\n    color: rgba(255, 255, 255, 0.87);\n    background-color: #242424;\n    font-synthesis: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  .two-sides {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    place-items: center;\n    margin: 0;\n    grid-template-rows: auto 1fr;\n    min-height: 100vh;\n    width: 100%;\n  }\n  .two-sides aside {\n    position: fixed;\n    background-color: #333;\n    padding: 20px;\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    top: 0;\n    left: 0;\n  }\n  .two-sides aside #tabs {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  .two-sides aside #tabs .tab {\n    padding: 10px;\n    font-size: 16px;\n    color: #fff;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n  .two-sides aside #tabs .tab:hover,\n  .two-sides aside #tabs .active {\n    background-color: #555;\n  }\n  .two-sides .main-body {\n    display: flex;\n    flex-direction: column;\n    place-items: center;\n  }\n\n  aside {\n    background-color: #333;\n    padding: 20px;\n    height: 50px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    bottom: 0;\n    left: 0;\n  }\n  aside #tabs {\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n  }\n  aside #tabs .tab {\n    padding: 10px;\n    font-size: 16px;\n    color: #fff;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n  aside #tabs .tab:hover,\n  aside #tabs .active {\n    background-color: #555;\n  }\n\n  table {\n    border-collapse: collapse;\n    max-width: 800px;\n    margin: 20px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    overflow: hidden;\n    border-radius: 10px;\n    background-color: #333;\n  }\n  table th,\n  table td {\n    padding: 15px;\n    text-align: left;\n  }\n  table th {\n    background-color: #6c64ff;\n    color: #fff;\n  }\n  table tr:nth-child(even) {\n    background-color: #4c4c4c;\n  }\n  table tr:hover {\n    background-color: #252525;\n  }\n\n  .chekbox {\n    position: relative;\n    margin: 20px;\n  }\n  .chekbox .cbx {\n    position: relative;\n    top: 1px;\n    width: 27px;\n    height: 27px;\n    border: 1px solid #c8ccd4;\n    border-radius: 3px;\n    transition: background 0.1s ease;\n    cursor: pointer;\n    display: block;\n  }\n  .chekbox .cbx:after {\n    content: \"\";\n    position: absolute;\n    top: 2px;\n    left: 8px;\n    width: 7px;\n    height: 14px;\n    opacity: 0;\n    transform: rotate(45deg) scale(0);\n    border-right: 2px solid #fff;\n    border-bottom: 2px solid #fff;\n    transition: all 0.3s ease;\n    transition-delay: 0.15s;\n  }\n  .chekbox .lbl {\n    margin-left: 5px;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n  .chekbox #cbx:checked ~ .cbx {\n    border-color: transparent;\n    background: #6871f1;\n    animation: jelly 0.6s ease;\n  }\n  .chekbox #cbx:checked ~ .cbx:after {\n    opacity: 1;\n    transform: rotate(45deg) scale(1);\n  }\n\n  label {\n    position: relative;\n    display: block;\n  }\n  label .input {\n    background-color: #333;\n    color: #fff;\n    width: 100%;\n    padding: 20px 5px 5px 10px;\n    outline: 0;\n    border: 1px solid rgba(105, 105, 105, 0.397);\n    border-radius: 10px;\n    font-size: medium;\n    position: relative;\n  }\n\n  .input + span {\n    color: rgba(255, 255, 255, 0.5);\n    position: absolute;\n    left: 10px;\n    top: 0px;\n    font-size: 0.9em;\n    cursor: text;\n    transition: 0.3s ease;\n  }\n\n  .input:placeholder-shown + span {\n    top: 12.5px;\n    font-size: 0.9em;\n  }\n\n  @keyframes jelly {\n    from {\n      transform: scale(1, 1);\n    }\n    30% {\n      transform: scale(1.25, 0.75);\n    }\n    40% {\n      transform: scale(0.75, 1.25);\n    }\n    50% {\n      transform: scale(1.15, 0.85);\n    }\n    65% {\n      transform: scale(0.95, 1.05);\n    }\n    75% {\n      transform: scale(1.05, 0.95);\n    }\n    to {\n      transform: scale(1, 1);\n    }\n  }\n  .hidden-xs-up {\n    display: none !important;\n  }\n\n  a {\n    font-weight: 500;\n    color: #646cff;\n    text-decoration: inherit;\n  }\n\n  a:hover {\n    color: #535bf2;\n  }\n\n  h1 {\n    font-size: 3.2em;\n    line-height: 1.1;\n  }\n\n  button,\n  select {\n    border-radius: 8px;\n    border: 1px solid transparent;\n    padding: 0.6em 1.2em;\n    margin: 5px;\n    font-size: 1em;\n    font-weight: 500;\n    font-family: inherit;\n    background-color: #1a1a1a;\n    cursor: pointer;\n    transition: border-color 0.25s;\n    color: #fff;\n  }\n\n  .error {\n    border: 1px solid #ff6464;\n  }\n\n  button:hover,\n  select:hover {\n    border-color: #646cff;\n  }\n\n  button:focus,\n  button:focus-visible {\n    outline: 4px auto -webkit-focus-ring-color;\n  }\n\n  .hide {\n    display: none;\n  }\n\n  .form {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    min-width: 350px;\n    padding: 20px;\n    border-radius: 20px;\n    position: relative;\n    background-color: #1a1a1a;\n    color: #fff;\n    border: 1px solid #333;\n  }\n  .form .flex {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    gap: 30px;\n  }\n  .form .submit {\n    border: none;\n    outline: none;\n    padding: 10px;\n    border-radius: 10px;\n    color: #fff;\n    font-size: 16px;\n    transform: 0.3s ease;\n    background-color: #00bfff;\n  }\n  .form .submit:hover {\n    background-color: rgba(0, 191, 255, 0.5882352941);\n  }\n\n  .form label .input:focus + span {\n    color: #00bfff;\n    top: 0px;\n    font-size: 0.7em;\n    font-weight: 600;\n  }\n\n  @keyframes pulse {\n    from {\n      transform: scale(0.9);\n      opacity: 1;\n    }\n    to {\n      transform: scale(1.8);\n      opacity: 0;\n    }\n  }\n  @media (prefers-color-scheme: light) {\n    :root {\n      color: #213547;\n      background-color: #ffffff;\n    }\n    a:hover {\n      color: #747bff;\n    }\n    button {\n      background-color: #f9f9f9;\n    }\n  }\n\n  .body-contents {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    place-items: center;\n    margin: 0;\n    min-width: 100%;\n    min-height: 100vh;\n  }\n\n  .card {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    min-width: 350px;\n    min-height: 350px;\n    line-height: 1.5;\n    background-color: #333;\n    border-radius: 30px;\n    color: #fff;\n    font-size: 20px;\n  }\n\n  /*# sourceMappingURL=style.css.map */\n`;\n\nreturn <Wrapper>{props.body}</Wrapper>;\n"
    },
    "components/widget/Input": {
      "code": "const Wrapper = styled.div`\n  label {\n    position: relative;\n  }\n  label .input {\n    background-color: #333;\n    color: #fff;\n    width: 100%;\n    padding: 20px 5px 5px 10px;\n    outline: 0;\n    border: 1px solid rgba(105, 105, 105, 0.397);\n    border-radius: 10px;\n    font-size: medium;\n  }\n\n  .input + span {\n    color: rgba(255, 255, 255, 0.5);\n    position: absolute;\n    left: 10px;\n    top: 0px;\n    font-size: 0.9em;\n    cursor: text;\n    transition: 0.3s ease;\n  }\n\n  .input:placeholder-shown + span {\n    top: 12.5px;\n    font-size: 0.9em;\n  }\n`;\nconst itemIndex = props.item;\nconsole.log(`item = ${itemIndex}`);\n\nfunction updateText(e) {\n  props.setItem((prev) => {\n    prev[props.item] = e.target.value;\n    return prev;\n  });\n}\n\nreturn (\n  <Widget\n    src=\"abnakore.near/widget/Wrapper\"\n    props={{\n      body: (\n        <label>\n          {props.kind === \"textarea\" ? (\n            <textarea\n              className=\"input\"\n              type={props.type}\n              placeholder=\"\"\n              required={props.required}\n              value={props.items[item]}\n              onChange={updateText}\n              style={props.styles}\n              {...props.otherAttributes}\n            />\n          ) : (\n            <input\n              className=\"input\"\n              type={props.type}\n              placeholder=\"\"\n              required={props.required}\n              value={props.items[item]}\n              onChange={updateText}\n              style={props.styles}\n              {...props.otherAttributes}\n            />\n          )}\n\n          <span>{props.placeholder}</span>\n        </label>\n      ),\n    }}\n  />\n);\n"
    },
    "components/widget/SignIn": {
      "code": "const accountId = context.accountId;\n\nreturn (\n  <Widget\n    src=\"abnakore.near/widget/Wrapper\"\n    props={{\n      body: (\n        <div className=\"main-body\">\n          <div className=\"body-contents\">\n            <h1>Sign In</h1>\n            <div className=\"form\">\n              <a\n                href={\n                  accountId\n                    ? \"https://near.org/abnakore.near/widget/App.jsx\"\n                    : \"https://near.org/signin\"\n                }\n              >\n                <button className=\"submit\">\n                  {accountId ? \"Home\" : \"Sign In\"}\n                </button>\n              </a>\n              <p className=\"member\">\n                {accountId === \"abnakore.near\" ? (\n                  <a href=\"https://near.org/abnakore.near/widget/AdminHome\">\n                    I'm an Admin\n                  </a>\n                ) : null}\n              </p>\n            </div>\n          </div>\n        </div>\n      ),\n    }}\n  />\n);\n"
    },
    "components/widget/CreateVote": {
      "code": "// Get accountId\nconst accountId = context.accountId;\n\n// All the votes\nconst [allVotes, setAllVotes] = useState([]);\n\n// Storing some values in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Get all the votes\nconst Data = Social.index(\"voteChainTest\", \"vote\");\n\nuseEffect(() => {\n  //   console.log(Data);\n  if (Data === undefined) {\n    // Set the candidate to an empty list if there is no candidate\n    setAllVotes([]);\n  } else {\n    setAllVotes(JSON.parse(Data));\n  }\n  //   console.log(Data, \"\");\n}, [Data === null]);\n\n// Get the current date and time\nfunction getDateTime() {\n  var now = new Date();\n  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\n  return now.toISOString().slice(0, 16);\n}\n\n// New Vote\nconst [newVote, setNewVote] = useState({\n  name: \"\",\n  desc: \"\",\n  role: \"\",\n  creator: \"\",\n  openTime: getDateTime(),\n  closeTime: \"\",\n  createdOn: \"\",\n  limit: \"\",\n  opened: true,\n  passcode: \"\",\n  candidates: [],\n  parties: [],\n  voters: [],\n});\n\n// Parties\nconst [parties, setParties] = useState([]);\n\n// New Party\nconst [newParty, setNewParty] = useState({\n  name: \"\",\n  acronym: \"\",\n});\n\n// candidates\nconst [candidates, setCandidates] = useState([]);\n\n// New Candidate\nconst [newCandidate, setNewCandidate] = useState({\n  name: \"\",\n  party: \"\",\n  role: newVote.role,\n  votes: 0,\n});\n\n// Add the new party to the table\nfunction AddParty() {\n  // Check if the data given is valid\n\n  if (newParty.name !== \"\" && newParty.acronym !== \"\") {\n    // check for no similar name or acronym\n    if (JSON.stringify(parties) !== JSON.stringify([])) {\n      const filtered = parties.filter((party) => {\n        return (\n          party.name.toLowerCase() === newParty.name.toLowerCase() ||\n          party.acronym.toLowerCase() === newParty.acronym.toLowerCase()\n        );\n      });\n      if (filtered.length > 0) {\n        return;\n      }\n    }\n\n    // Check for three letters of the acronym\n    if (newParty.acronym.length <= 4 && newParty.acronym.length > 0) {\n      setParties((prev) =>\n        prev.concat([\n          {\n            ...newParty,\n            acronym: newParty.acronym.toUpperCase(),\n            name: newParty.name\n              .toLowerCase()\n              .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n          },\n        ])\n      );\n      setNewParty({ name: \"\", acronym: \"\" });\n    }\n  }\n}\n\n// Add the new party to the table\nfunction AddCandidate() {\n  // Check if the data given is valid\n\n  if (newCandidate.name !== \"\" && newCandidate.party !== \"\") {\n    // check if there is another candidate with thesame party\n    const filtered = candidates.filter((candidate) => {\n      return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n    });\n    if (filtered.length > 0) {\n      return;\n    }\n\n    // Check for three letters of the acronym\n    setCandidates((prev) =>\n      prev.concat([\n        {\n          ...newCandidate,\n          name: newCandidate.name\n            .toLowerCase()\n            .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n        },\n      ])\n    );\n    setNewCandidate({\n      name: \"\",\n      party: \"\",\n      role: \"\",\n      votes: 0,\n    });\n  }\n}\n\n// Function that get the unselected parties\nfunction getUnusedParties() {\n  // const filtered = candidates.filter((candidate) => {\n  //   return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n  // });\n  const usedParties = candidates.map((candidate) => candidate.party);\n  const unusedParties = parties.filter(\n    (party) => !usedParties.includes(party.acronym)\n  );\n  return unusedParties;\n}\n\n// Update the value of the dropdown\nfunction updateDropDown(e) {\n  setTest(e.target.value);\n  let c = newCandidate;\n  c.party = e.target.value;\n  setNewCandidate(c);\n}\n\n// for test\nconst [test, setTest] = useState(\"E\");\n\nconst secText = styled.h5`\n  text-align: center;\n`;\n\n// Hashing function\nfunction hash(text) {\n  var hashed = \"\";\n  for (var i = 0; i < text.length; i++) {\n    // console.log(text.charAt(i), \"=\", text.charCodeAt(i));\n    hashed += text.charCodeAt(i);\n  }\n  //   console.log(hashed);\n  return hashed;\n}\n\n// The main create vote Function\nfunction createVote() {\n  console.log(\"creating vote\");\n  console.log(newVote);\n  // Check if the name is valid\n  if (newVote.name === \"\") {\n    setState({\n      ...state,\n      error: \"Name cannot be Empty\",\n      showError: true,\n    });\n    return;\n  }\n\n  // Validate desc\n  if (newVote.desc === \"\") {\n    setState({\n      ...state,\n      error: \"Description cannot be Empty\",\n      showError: true,\n    });\n    console.log(\"Description cannot be Empty\");\n    return;\n  }\n\n  // Validate role\n  if (newVote.role === \"\") {\n    setState({\n      ...state,\n      error: \"Role cannot be Empty\",\n      showError: true,\n    });\n    console.log(\"Role cannot be Empty\");\n    return;\n  }\n\n  // Validate start and end date and time\n  if (newVote.openTime !== \"\" && newVote.closeTime !== \"\") {\n    if (Date.parse(newVote.openTime) >= Date.parse(newVote.closeTime)) {\n      setState({\n        ...state,\n        error: \"Opening time must be earlier than the close time\",\n        showError: true,\n      });\n      console.log(\"Opening time must be earlier than the close time\");\n      return;\n    }\n  }\n\n  //   console.log(\"this\", candidates);\n  // Set the roles of the candidates\n  const newCandidates = candidates.map((candidate) => ({\n    ...candidate,\n    role: newVote.role,\n  }));\n  //   console.log(newCandidates);\n\n  const tempVote = newVote;\n\n  // Set the curresponding values of the obj\n  tempVote.creator = accountId;\n  tempVote.opened =\n    newVote.closeTime !== \"\"\n      ? Date.parse(newVote.openTime) <= Date.parse(getDateTime()) &&\n        Date.parse(newVote.closeTime) > Date.parse(getDateTime())\n      : Date.parse(newVote.openTime) <= Date.parse(getDateTime());\n  tempVote.createdOn = getDateTime();\n  tempVote.candidates = newCandidates;\n  tempVote.parties = parties;\n  tempVote.passcode = hash(newVote.passcode);\n  tempVote.id = allVotes.length;\n\n  // console.log(\"That\", tempVote);\n\n  // Upload the data to socialDb\n  // Social.set({ votes: allVotes.concat([tempVote]) });\n  Social.set({\n    index: {\n      voteChainTest: JSON.stringify({\n        key: \"vote\",\n        value: tempVote,\n      }),\n    },\n  });\n\n  setNewVote({\n    name: \"\",\n    desc: \"\",\n    role: \"\",\n    creator: \"\",\n    openTime: getDateTime(),\n    closeTime: \"\",\n    createdOn: \"\",\n    limit: \"\",\n    opened: true,\n    passcode: \"\",\n    candidates: [],\n    parties: [],\n    voters: [],\n  });\n  setCandidates([]);\n  setParties([]);\n}\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              <div className=\"body-contents\">\n                <h1>Create</h1>\n                {state.showError && (\n                  <p style={{ color: \"red\" }}>{state.error}</p>\n                )}\n                <div className=\"form\">\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: \"Name / Title\",\n                      required: true,\n                      item: \"name\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.name,\n                      },\n                    }}\n                  />\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: `Description ${newVote.desc.length}/700`,\n                      required: true,\n                      kind: \"textarea\",\n                      item: \"desc\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.desc,\n                        maxLength: 700,\n                        rows: 10,\n                      },\n                    }}\n                  />\n                  <hr />\n\n                  <secText>Parties Section</secText>\n                  <Widget\n                    src=\"abnakore.near/widget/Table\"\n                    props={{\n                      headings: [\"S/N\", \"Party Name\", \"Acronym\"],\n                      data: parties.map((p, i) =>\n                        [i + 1].concat(Object.values(p).splice(0, 2))\n                      ),\n                    }}\n                  />\n                  <div className=\"form\">\n                    <secText>Add Party</secText>\n                    <div className=\"flex\">\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Party Name\",\n                          required: true,\n                          item: \"name\",\n                          items: newParty,\n                          setItem: setNewParty,\n                          otherAttributes: {\n                            value: newParty.name,\n                          },\n                        }}\n                      />\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Acronym\",\n                          required: true,\n                          item: \"acronym\",\n                          items: newParty,\n                          setItem: setNewParty,\n                          otherAttributes: {\n                            value: newParty.acronym,\n                          },\n                        }}\n                      />\n                    </div>\n                    <button onClick={AddParty}>Add</button>\n                  </div>\n                  <hr />\n\n                  <secText>Candidates Section</secText>\n                  <Widget\n                    src=\"abnakore.near/widget/Table\"\n                    props={{\n                      headings: [\"S/N\", \"Candidate's Name\", \"Party\"],\n                      data: candidates.map((p, i) =>\n                        [i + 1].concat(Object.values(p).splice(0, 2))\n                      ),\n                    }}\n                  />\n                  <div className=\"form\">\n                    <secText>Add Candidate</secText>\n                    <div className=\"flex\">\n                      <Widget\n                        src=\"abnakore.near/widget/Input.jsx\"\n                        props={{\n                          type: \"text\",\n                          placeholder: \"Candidate's Name\",\n                          required: true,\n                          item: \"name\",\n                          items: newCandidate,\n                          setItem: setNewCandidate,\n                          otherAttributes: {\n                            value: newCandidate.name,\n                          },\n                        }}\n                      />\n                      <select\n                        className=\"drop-down\"\n                        value={newCandidate.party}\n                        onChange={updateDropDown}\n                        name=\"party\"\n                        required\n                      >\n                        <option className=\"option\" value=\"\">\n                          Select Party\n                        </option>\n                        {getUnusedParties().map((party) => (\n                          <option\n                            className=\"option\"\n                            key={party.acronym}\n                            value={party.acronym}\n                          >\n                            {party.name} ({party.acronym})\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <button onClick={AddCandidate}>Add</button>\n                  </div>\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"text\",\n                      placeholder: \"Role\",\n                      required: true,\n                      item: \"role\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.role,\n                      },\n                    }}\n                  />\n\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"password\",\n                      placeholder: \"Passcode (optional)\",\n                      required: false,\n                      item: \"passcode\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.passcode,\n                      },\n                    }}\n                  />\n                  <Widget\n                    src=\"abnakore.near/widget/Input.jsx\"\n                    props={{\n                      type: \"number\",\n                      placeholder: \"Max number of voters (optional)\",\n                      required: false,\n                      item: \"limit\",\n                      items: newVote,\n                      setItem: setNewVote,\n                      otherAttributes: {\n                        value: newVote.limit,\n                      },\n                    }}\n                  />\n                  <div className=\"flex\">\n                    <Widget\n                      src=\"abnakore.near/widget/Input.jsx\"\n                      props={{\n                        type: \"datetime-local\",\n                        placeholder: \"Open on\",\n                        required: true,\n                        item: \"openTime\",\n                        items: newVote,\n                        setItem: setNewVote,\n                        otherAttributes: {\n                          min: getDateTime(),\n                          value: newVote.openTime,\n                          onChange: (e) => {\n                            if (e.target.value !== \"\") {\n                              setNewVote({\n                                ...newVote,\n                                openTime: e.target.value,\n                              });\n                            }\n                          },\n                        },\n                        styles: {\n                          width: \"120%\",\n                        },\n                      }}\n                    />\n                    <Widget\n                      src=\"abnakore.near/widget/Input.jsx\"\n                      props={{\n                        type: \"datetime-local\",\n                        placeholder: \"Close on (optional)\",\n                        required: true,\n                        item: \"closeTime\",\n                        items: newVote,\n                        setItem: setNewVote,\n                        otherAttributes: {\n                          min: newVote.openTime,\n                          value: newVote.closeTime,\n                          onChange: (e) => {\n                            setNewVote({\n                              ...newVote,\n                              closeTime: e.target.value,\n                            });\n                          },\n                        },\n                        styles: {\n                          width: \"100%\",\n                        },\n                      }}\n                    />\n                  </div>\n                  <button onClick={createVote}>Create</button>\n                </div>\n              </div>\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);"
    },
    "components/widget/AdminHome": {
      "code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && parseFloat(props.vote);\n// const voteId = 113225718;\n\n// All the votes\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst otherCandidates = Social.index(\"voteChainTest\", \"candidate\")\n  ? Social.index(\"voteChainTest\", \"candidate\")\n  : [];\nconst otherParties = Social.index(\"voteChainTest\", \"party\")\n  ? Social.index(\"voteChainTest\", \"party\")\n  : [];\nconst votes = Social.index(\"voteChainTest\", \"votes\")\n  ? Social.index(\"voteChainTest\", \"votes\")\n  : [];\n\n// Set the value of votetorender by adding other parties and candidates to it\nfunction getValue() {\n  console.log(otherCandidates, \"this\");\n  var temp = allVotes.find((vote) => vote.blockHeight === voteId);\n  var votesOnThis = votes.filter((vote) => vote.value.voteId === voteId);\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value.parties.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n      candidates: temp.value.candidates\n        .concat(\n          // Add other candidates to the list of all candidates\n          otherCandidates\n            .filter(\n              (candidate) =>\n                // Get only the candidates of the vote and vreified\n                candidate.value.voteId === voteId &&\n                candidate.value.name &&\n                candidate.value.party &&\n                candidate.value.role\n            )\n            .map((c) => c.value)\n        )\n        .map(\n          // This put the number of votes of the candidate\n          (cand, i) => ({\n            ...cand,\n            votes: votesOnThis.filter((vote) => vote.value.party === cand.party)\n              .length,\n          })\n        ),\n      voters: votesOnThis.map((vote) => vote.value.by),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                voteToRender.value.creator === accountId ? (\n                  <div className=\"two-sides\">\n                    <Widget\n                      src=\"abnakore.near/widget/Aside\"\n                      props={{\n                        objs: pages,\n                        active: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n                      }}\n                    />\n                    {voteToRender.value.creator === accountId ? (\n                      <div className=\"body-contents\">\n                        <h1>Admin Home</h1>\n                        <h4>Candidates Details</h4>\n                        <Widget\n                          src=\"abnakore.near/widget/Table\"\n                          props={{\n                            headings: [\n                              \"S/N\",\n                              \"Candidate's Name\",\n                              \"Party\",\n                              \"Role\",\n                              \"Number of votes\",\n                            ],\n                            data: Object.values(\n                              voteToRender.value.candidates\n                                .sort((a, b) => a.votes - b.votes)\n                                .map((c, i) =>\n                                  [i + 1].concat([\n                                    c.name,\n                                    c.party,\n                                    c.role,\n                                    c.votes,\n                                  ])\n                                )\n                            ),\n                          }}\n                        />\n\n                        <Link\n                          to={`/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`}\n                        >\n                          <button>Add Candidate</button>\n                        </Link>\n                        <hr />\n                        <h4>Parties Details</h4>\n                        <Widget\n                          src=\"abnakore.near/widget/Table\"\n                          props={{\n                            headings: [\"S/N\", \"Party Name\", \"Acronym\"],\n                            data: Object.values(\n                              voteToRender.value.parties.map((p, i) =>\n                                [i + 1].concat(Object.values(p))\n                              )\n                            ),\n                          }}\n                        />\n\n                        <Link\n                          to={`/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`}\n                        >\n                          <button>Add Party</button>\n                        </Link>\n                        <hr />\n                      </div>\n                    ) : (\n                      <div className=\"body-contents\">\n                        <h1>Can not access this page</h1>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"body-contents\">\n                    <h1>You don't have access to this page</h1>\n                    <Link to=\"/abnakore.near/widget/VoteChain\">\n                      Back to Home Page\n                    </Link>\n                  </div>\n                )\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" />\n    )}\n  </>\n);\n"
    },
    "components/widget/Aside": {
      "code": "const StyledAside = styled.div`\n  --faded_bg_color: #8889;\n  // Light theme colors\n  --light_background: #ffffff;\n  --light_text_primary: #333333;\n  --light_text_secondary: #666666;\n  --light_button_primary: #4caf50;\n  --light_button_secondary: #66b2ff;\n  --light_link: #66b2ff;\n  --light_status_success: #4caf50;\n  --light_status_error: #ff5b5b;\n  --light_status_warning: #ff8c00;\n  --light_status_info: #66b2ff;\n  --light_highlight: #ffd700;\n\n  // Dark theme colors\n  --dark_background: #333333;\n  --dark_text_primary: #ffffff;\n  --dark_text_secondary: #b0b0b0;\n  --dark_button_primary: #4caf50;\n  --dark_button_secondary: #66b2ff;\n  --dark_link: #66b2ff;\n  --dark_status_success: #4caf50;\n  --dark_status_error: #ff5b5b;\n  --dark_status_warning: #ff8c00;\n  --dark_status_info: #66b2ff;\n  --dark_highlight: #ffd700;\n\n  @keyframes fall {\n    0% {\n      transform: translateY(-100%);\n    }\n\n    100% {\n      transform: translateY(0);\n    }\n  }\n\n  width: calc(100% - 40px);\n  padding: 5px 20px;\n  background-color: var(--faded_bg_color);\n  backdrop-filter: blur(10px);\n  border-radius: 25px;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px auto;\n  position: relative;\n  z-index: 100;\n\n  .logo {\n    font-size: 20px;\n    font-weight: 300;\n\n    a {\n      text-decoration: none;\n      color: var(--light_background);\n    }\n\n    h3 {\n      margin: 15px;\n    }\n  }\n\n  .right {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  }\n\n  .tabs {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n  }\n\n  .tabs .tab {\n    margin: 0 10px;\n    font-weight: 400;\n    font-size: 16px;\n    color: var(--light_background);\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n  .tabs .tab:hover,\n  .tabs .tab.active {\n    color: var(--light_button_primary);\n  }\n\n  .others {\n    width: auto;\n  }\n\n  .toggle i {\n    display: none;\n    color: var(--light_background);\n    font-size: 30px;\n    cursor: pointer;\n  }\n\n  /* Responsive (tab, mobile) */\n  &.tab,\n  &.mobile {\n    overflow: hidden;\n\n    &.opened {\n      border-radius: 25px 25px 0 0;\n      overflow: visible;\n    }\n\n    .right,\n    .tabs {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    .right {\n      position: absolute;\n      top: 100%;\n      right: 0;\n      background-color: var(--faded_bg_color);\n      backdrop-filter: blur(10px);\n      border-radius: 0 0 25px 25px;\n      padding-bottom: 20px;\n      display: none;\n      z-index: -1;\n      animation: fall 0.2s forwards;\n    }\n\n    .right.opened {\n      display: block;\n    }\n\n    .tabs .tab {\n      margin: 5px 0;\n      padding: 15px 0;\n      width: 100%;\n      text-align: center;\n    }\n\n    .toggle i {\n      display: block;\n      padding: 20px;\n      cursor: pointer;\n    }\n\n    a button {\n      width: -moz-available;\n    }\n  }\n`;\n\n// const [opened, setOpened] = useState(false);\nState.init({ opened: false, currentClass: \"tab\" });\n\n// const [currentClass, setCurrentClass] = useState(\"tab\");\n// const asideRef = document.getElementById(\"aside\");\n\n// // Check the width and update the className\n// useEffect(() => {\n//   const div = asideRef.current;\n\n//   const updateClassBasedOnWidth = () => {\n//     const width = div.offsetWidth;\n\n//     if (width < 600) {\n//       setCurrentClass(\"mobile\");\n//     } else if (width >= 600 && width < 970) {\n//       setCurrentClass(\"tab\");\n//     } else {\n//       setCurrentClass(\"desktop\");\n//     }\n//   };\n\n//   // Use ResizeObserver to watch for element size changes\n//   const resizeObserver = new ResizeObserver(updateClassBasedOnWidth);\n//   resizeObserver.observe(div);\n\n//   // Initial call to set class\n//   updateClassBasedOnWidth();\n\n//   // Cleanup\n//   return () => resizeObserver.disconnect();\n// }, []);\n\nreturn (\n  <StyledAside\n    id={\"aside\"}\n    className={`aside ${state.currentClass} ${\n      state.opened ? \"opened\" : \"closed\"\n    }`}\n  >\n    <div className=\"logo\">\n      <Link to=\"/abnakore.near/widget/VoteChain\">\n        <h3>VoteChain</h3>\n      </Link>\n    </div>\n    <div className={`right ${state.opened ? \"opened\" : \"closed\"}`}>\n      <div className=\"tabs\" id=\"tabs\">\n        {props.objs.map((obj) =>\n          !obj.handleClick ? (\n            <Link\n              key={obj.link}\n              to={obj.link}\n              className={`tab ${props.active === obj.link ? \"active\" : \"\"}`}\n            >\n              {obj.name}\n            </Link>\n          ) : (\n            <p\n              key={obj.link}\n              href={obj.link}\n              className={`tab ${props.active === obj.link ? \"active\" : \"\"}`}\n              onClick={obj.handleClick}\n            >\n              {obj.name}\n            </p>\n          )\n        )}\n      </div>\n\n      {props.button &&\n        (props.button.handleClick ? (\n          <Widget\n            src=\"abnakore.near/widget/Button\"\n            props={{\n              title: props.button.title,\n              handleClick: props.button.handleClick,\n              theme: \"primary\",\n            }}\n          />\n        ) : (\n          <Link to={props.button.link}>\n            <Widget\n              src=\"abnakore.near/widget/Button\"\n              props={{\n                title: props.button.title,\n                handleClick: () =>\n                  console.log(`${props.button.title} Button Clicked!!`),\n                theme: \"primary\",\n                scaleWhenHover: false,\n              }}\n            />\n          </Link>\n        ))}\n    </div>\n    <div\n      onClick={() => State.update({ opened: !state.opened })}\n      className=\"toggle\"\n    >\n      {state.opened ? <i class=\"bi-x\"></i> : <i class=\"bi-list\"></i>}\n    </div>\n  </StyledAside>\n);\n"
    },
    "components/widget/VoteChain": {
      "code": "// Get accountId\nconst accountId = context.accountId;\n\n// All the votes\n// Get all the votes\nconst allVotes = Social.index(\"voteChainTest\", \"vote\");\nconst otherCandidates = Social.index(\"voteChainTest\", \"candidate\");\n\n// Tabs\nconst [tab, setTab] = useState(props.tab ? props.tab : \"all\");\n\n// The user's watchlist\nconst [watchlist, setWatchlist] = useState([]);\n\n// Votes to be rendered on the screen\nconst [votesToRender, setVotesToRender] = useState(allVotes);\n\n// Get The watchlist of the user\nconst watchlistData = Social.get(`${accountId}/voteChain_watchlist`);\n\nuseEffect(() => {\n  setVotesToRender(allVotes);\n  console.log(votesToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\nuseEffect(() => {\n  if (watchlistData === undefined) {\n    // Set the watchlist to an empty array\n    setWatchlist([]);\n  } else {\n    setWatchlist(JSON.parse(watchlistData));\n  }\n}, [watchlistData === null]);\n\nuseEffect(() => {\n  // Get the only votes the user created\n  if (tab === \"my_votes\") {\n    setVotesToRender(\n      allVotes.filter((vote) => vote.value.creator === accountId)\n    );\n  } else if (tab === \"watchlist\") {\n    setVotesToRender(\n      allVotes.filter((vote) => watchlist.includes(vote.blockHeight))\n    );\n  } else {\n    setVotesToRender(allVotes);\n  }\n}, [watchlist, tab]);\n\n// Pages that can be reached via the aside tab\nconst [pages, setPage] = useState([\n  {\n    name: \"All Votes\",\n    link: \"/abnakore.near/widget/VoteChain\",\n    handleClick: () => setTab(\"all\"),\n    tag: \"all\",\n  },\n  {\n    name: \"My Votes\",\n    link: \"/abnakore.near/widget/VoteChain?tab=my_votes\",\n    handleClick: () => setTab(\"my_votes\"),\n    tag: \"my_votes\",\n  },\n  {\n    name: \"Watchlist\",\n    link: \"/abnakore.near/widget/VoteChain?tab=watchlist\",\n    handleClick: () => setTab(\"watchlist\"),\n    tag: \"watchlist\",\n  },\n  // {\n  //   name: \"Create New Vote\",\n  //   type: \"button\",\n  //   link: \"/abnakore.near/widget/CreateVote\",\n  // },\n]);\n\n// State to save the active page\nconst activePage = useMemo(\n  () => pages.find((page) => page.tag === tab).link,\n  [tab]\n);\n\n//  Format the date and time (January 7, 2024 at 5:57 PM)\nfunction formatDateTime(dateTimeString) {\n  // Assuming you have a date-time input with the format \"YYYY-MM-DDTHH:mm\" as a string\n  const dateTime = new Date(dateTimeString);\n\n  // Formatting the date and time in 12-hour format\n  const formattedDateTime = dateTime.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true, // Set to true for 12-hour format\n  });\n\n  return formattedDateTime;\n}\n\nconst List = styled.div`\n  width: calc(100vw - 20px);\n  height: 100%;\n  padding: 20px 10px;\n\n  @media screen and (min-width: 1200px) {\n    width: calc(100vw - 20%);\n  }\n`;\n\nconst Wrapper = styled.div`\n  .main-body {\n    margin: 0;\n    display: flex;\n    place-items: center;\n    min-width: 320px;\n    min-height: 100vh;\n    width: 100vw;\n\n    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n    line-height: 1.5;\n    font-weight: 400;\n    color-scheme: light dark;\n    color: rgba(255, 255, 255, 0.87);\n    background-color: #242424;\n    font-synthesis: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  .two-sides .main-body {\n    display: flex;\n    flex-direction: column;\n    place-items: center;\n  }\n\n  .body-contents {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    place-items: center;\n    margin: 0;\n    min-width: 100%;\n    min-height: 100vh;\n  }\n\n  .two-sides {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    place-items: center;\n    margin: 0;\n    grid-template-rows: auto 1fr;\n    min-height: 100vh;\n    width: 100%;\n  }\n  .two-sides aside {\n    position: fixed;\n    background-color: #333;\n    padding: 20px;\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    top: 0;\n    left: 0;\n  }\n  .two-sides aside #tabs {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  .two-sides aside #tabs .tab {\n    padding: 10px;\n    font-size: 16px;\n    color: #fff;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n  .two-sides aside #tabs .tab:hover,\n  .two-sides aside #tabs .active {\n    background-color: #555;\n  }\n`;\n\nreturn (\n  <>\n    {accountId ? (\n      <Wrapper>\n        <div className=\"main-body\">\n          <div className=\"body-contents\">\n            <Widget src=\"abnakore.near/widget/Hero\" props={{}} />\n            <div id=\"votes\" className=\"two-sides\">\n              <Widget\n                src=\"abnakore.near/widget/Aside\"\n                props={{\n                  objs: pages,\n                  active: activePage,\n                  button: {\n                    title: \"Create New Vote\",\n                    link: \"https://near.social/abnakore.near/widget/CreateVote\",\n                  },\n                }}\n              />\n              {votesToRender.length > 0 ? (\n                <List>\n                  {votesToRender.map((vote) => (\n                    <Link\n                      to={`/abnakore.near/widget/App.jsx?vote=${vote.blockHeight}`}\n                    >\n                      <Widget\n                        src=\"abnakore.near/widget/VoteCard\"\n                        props={{\n                          ...vote.value,\n                          candidates: vote.value.candidates.concat(\n                            otherCandidates.filter(\n                              (candidate) =>\n                                parseFloat(candidate.value.voteId) ===\n                                parseFloat(vote.blockHeight)\n                            )\n                          ),\n                          style: {},\n                        }}\n                      />\n                    </Link>\n                  ))}\n                </List>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>No Votes</h1>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </Wrapper>\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n"
    },
    "components/widget/ManageCandidates": {
      "code": "// Get the user's accountId\nconst accountId = context.accountId;\n\n// Declaring variables\n// !!!\nconst voteId = props.vote && parseFloat(props.vote);\n// const voteId = 113239184;\n\n// All the votes\n// const [allVotes, setAllVotes] = useState([]);\n// const [voteToRender, setVoteToRender] = useState([]);\nconst allVotes = Social.index(\"voteChainTest\", \"vote\")\n  ? Social.index(\"voteChainTest\", \"vote\")\n  : [];\nconst [otherCandidates, setOtherCandidates] = useState(\n  Social.index(\"voteChainTest\", \"candidate\")\n    ? Social.index(\"voteChainTest\", \"candidate\")\n    : []\n);\nconst otherParties = Social.index(\"voteChainTest\", \"party\");\n\n// Set the value of votetorender by adding other parties and candidates to it\nfunction getValue() {\n  console.log(otherCandidates);\n  var temp = allVotes.find((vote) => vote.blockHeight === voteId);\n  return {\n    ...temp,\n    value: {\n      ...temp.value,\n      parties: temp.value.parties.concat(\n        otherParties\n          .filter(\n            (party) =>\n              party.value.voteId === voteId &&\n              party.value.name &&\n              party.value.acronym\n          )\n          .map((party) => ({\n            name: party.value.name,\n            acronym: party.value.acronym,\n          }))\n      ),\n      candidates: temp.value.candidates.concat(\n        otherCandidates\n          .filter(\n            (candidate) =>\n              candidate.value.voteId === voteId &&\n              candidate.value.name &&\n              candidate.value.party &&\n              candidate.value.role\n          )\n          .map((c) => c.value)\n      ),\n    },\n  };\n}\nconst [voteToRender, setVoteToRender] = useState(getValue());\n\n// Get all the votes\nuseEffect(() => {\n  // Set the vote to be rendered\n  setVoteToRender(getValue());\n  console.log(voteToRender, allVotes, \"votesData\");\n}, [allVotes]);\n\nfunction refresh() {\n  setOtherCandidates(\n    Social.index(\"voteChainTest\", \"candidate\")\n      ? Social.index(\"voteChainTest\", \"candidate\")\n      : []\n  );\n  setVoteToRender(getValue());\n  // remove error\n  setState({\n    ...state,\n    error: \"\",\n    showError: false,\n  });\n  setNewCandidate({\n    name: \"\",\n    party: \"\",\n    role: \"\",\n    votes: 0,\n  });\n  console.log(\"donee\");\n}\n\n// Storing some data in state\nconst [state, setState] = useState({\n  error: \"\",\n  showError: false,\n});\n\n// Pages that will be displayed in the aside\nconst [pages, setPages] = useState([]);\n\n// Add admin pages if the user is the creator of the vote\nuseEffect(() => {\n  if (voteToRender.value.creator === accountId) {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Admin Home\",\n        link: `/abnakore.near/widget/AdminHome?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Manage Candidates\",\n        link: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Mange Parties\",\n        link: `/abnakore.near/widget/ManageParties?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  } else {\n    setPages([\n      {\n        name: \"Voting Page\",\n        link: `/abnakore.near/widget/App.jsx?vote=${voteToRender.blockHeight}`,\n      },\n      {\n        name: \"Result\",\n        link: `/abnakore.near/widget/Result.jsx?vote=${voteToRender.blockHeight}`,\n      },\n    ]);\n  }\n}, [voteToRender.value.creator === accountId]);\n\n// Function that get the unselected parties\nfunction getUnusedParties() {\n  const usedParties = voteToRender.value.candidates.map(\n    (candidate) => candidate.party\n  );\n  const unusedParties = voteToRender.value.parties.filter(\n    (party) => !usedParties.includes(party.acronym)\n  );\n  return unusedParties;\n}\n\n// List of candidates and their curresponding number of votes\n// const [candidates, setCandidates] = useState([]);\n\n// name and acro\nconst [newCandidate, setNewCandidate] = useState({\n  name: \"\",\n  party: \"\",\n  role: \"\",\n  votes: 0,\n});\n\n// Update the dropdown\nfunction updateDropDown(e) {\n  setNewCandidate((prev) => {\n    prev.party = e.target.value;\n    return prev;\n  });\n}\n\n// Save the data and add a new candidate\nfunction save() {\n  if (newCandidate.name !== \"\" && newCandidate.party !== \"\") {\n    setOtherCandidates(\n      Social.index(\"voteChainTest\", \"candidate\")\n        ? Social.index(\"voteChainTest\", \"candidate\")\n        : []\n    );\n    setVoteToRender(getValue());\n\n    // check if there is another candidate with thesame party\n    const filtered = voteToRender.value.candidates.filter((candidate) => {\n      return candidate.party.toLowerCase() === newCandidate.party.toLowerCase();\n    });\n    if (filtered.length > 0) {\n      setState({\n        ...state,\n        error: \"Two candidates cannot be in thesame party\",\n        showError: true,\n      });\n      return;\n    }\n\n    const NewCandidate = {\n      ...newCandidate,\n      name: newCandidate.name\n        .toLowerCase()\n        .replace(/\\b\\w/g, (s) => s.toUpperCase()),\n      role: voteToRender.value.role,\n      votes: 0,\n      voteId: voteId,\n    };\n\n    // Upload the data to socialDb\n    console.log(NewCandidate);\n    // Social.set({\n    //   index: {\n    //     voteChainTest: JSON.stringify({\n    //       key: \"candidate\",\n    //       value: NewCandidate,\n    //     }),\n    //   },\n    // });\n    // setNewCandidate({\n    //   name: \"\",\n    //   party: \"\",\n    //   role: \"\",\n    //   votes: 0,\n    // });\n    setState({\n      ...state,\n      error: \"\",\n      showError: false,\n    });\n    return {\n      index: {\n        voteChainTest: JSON.stringify({\n          key: \"candidate\",\n          value: NewCandidate,\n        }),\n      },\n    };\n  } else {\n    setState({\n      ...state,\n      error: `Candidate's ${\n        newCandidate.name === \"\" ? \"Name\" : \"Party\"\n      } can not be empty`,\n      showError: true,\n    });\n    return null;\n  }\n}\n\nconst secText = styled.h3`\n  text-align: center;\n`;\n\n// Only signed In users can access the page\nreturn (\n  <>\n    {accountId ? (\n      <Widget\n        src=\"abnakore.near/widget/Wrapper\"\n        props={{\n          body: (\n            <div className=\"main-body\">\n              {voteToRender ? (\n                <div className=\"two-sides\">\n                  <Widget\n                    src=\"abnakore.near/widget/Aside\"\n                    props={{\n                      objs: pages,\n                      active: `/abnakore.near/widget/ManageCandidates?vote=${voteToRender.blockHeight}`,\n                    }}\n                  />\n                  {voteToRender.value.creator === accountId ? (\n                    <div className=\"body-contents\">\n                      <h1>Manage Candidates</h1>\n                      <Widget\n                        src=\"abnakore.near/widget/Table\"\n                        props={{\n                          headings: [\n                            \"S/N\",\n                            \"Candidate's Name\",\n                            \"Party\",\n                            \"Role\",\n                          ],\n                          data: Object.values(\n                            voteToRender.value.candidates\n                              .sort((a, b) => a.name > b.name)\n                              .map((c, i) =>\n                                [i + 1].concat([c.name, c.party, c.role])\n                              )\n                          ),\n                        }}\n                      />\n                      <div className=\"form\">\n                        <secText>Add Candidate</secText>\n                        {state.showError && (\n                          <p style={{ color: \"red\", textAlign: \"center\" }}>\n                            {state.error}\n                          </p>\n                        )}\n                        <div className=\"flex\">\n                          <Widget\n                            src=\"abnakore.near/widget/Input.jsx\"\n                            props={{\n                              type: \"text\",\n                              placeholder: \"Full Name\",\n                              required: true,\n                              item: \"name\",\n                              items: newCandidate,\n                              setItem: setNewCandidate,\n                              otherAttributes: {\n                                value: newCandidate.name,\n                              },\n                            }}\n                          />\n\n                          <select\n                            className=\"drop-down\"\n                            value={newCandidate.party}\n                            onChange={updateDropDown}\n                            name=\"party\"\n                            required\n                          >\n                            <option className=\"option\" value=\"\">\n                              Select Party\n                            </option>\n                            {getUnusedParties().map((party) => (\n                              <option\n                                className=\"option\"\n                                key={party.acronym}\n                                value={party.acronym}\n                              >\n                                {party.name} ({party.acronym})\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <CommitButton data={save} onCommit={refresh}>\n                          Add\n                        </CommitButton>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"body-contents\">\n                      <h1>You don't have access to this page</h1>\n                      <Link to=\"/abnakore.near/widget/VoteChain\">\n                        Back to Home Page\n                      </Link>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"body-contents\">\n                  <h1>Vote Doesn't exist</h1>\n                </div>\n              )}\n            </div>\n          ),\n        }}\n      />\n    ) : (\n      <Widget src=\"abnakore.near/widget/SignIn.jsx\" props={props} />\n    )}\n  </>\n);\n"
    }
  }
}